#coding:utf-8
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.nn.init as init
import sys
sys.path.append("..")
from config import DefaultConfig
torch.manual_seed(5)
conf = DefaultConfig()

class Net(nn.Module):
    def __init__(self):
        
        super(Net,self).__init__()
        self.conv1 = nn.Conv2d(1, 6, 5,padding=(2,2))
        init.xavier_uniform(self.conv1.weight)
        #print self.conv1.weight
        init.constant(self.conv1.bias, 0.1)
        self.bn1 = nn.BatchNorm2d(6)
        
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5,padding=(2,2))
        init.xavier_uniform(self.conv2.weight)
        init.constant(self.conv2.bias, 0.1)
        self.bn2 = nn.BatchNorm2d(16)
        
        self.fc1 = nn.Linear(16 * 32 * 32, 1024)
        self.fc2 = nn.Linear(1024, 84)
        self.fc3 = nn.Linear(84, 1)
    
    def forward(self, x):
        x = self.conv1(x)
        if conf.bn:
            x = self.bn1(x)
        x = self.pool(F.relu(x))
        x = self.conv2(x)
        if conf.bn:
            x = self.bn2(x)
        x = self.pool(F.relu(x))
        x = x.view(-1, 16 * 32 * 32)
        x = F.relu(self.fc1(x))
        x = F.tanh(self.fc2(x))
        x = F.sigmoid(self.fc3(x))
        return x

import torch.optim as optim
def optimizer(net):
    optimize = optim.SGD(net.parameters(),lr=0.01)
    net.train()
    return optimize
    


    

if __name__=="__main__":
    net = Net()
    print net.training
    net.eval()
    print net.training
    optimizer(net)
    print net.training
    #torch.save(net.state_dict(),"init.pkl")
    #n = Net()
    #n.load_state_dict(torch.load("init.pkl"))
    #print n
