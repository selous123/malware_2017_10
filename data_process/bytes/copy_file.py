#coding:utf-8
from __future__ import division
import re
import os
def find_file(source_dirs,part_file_name,des_dir):
    """
    从源文件中查找ID文件,然后将其储存到目标文件夹中
    Args:
        source_dirs:list,表示搜索的源文件
        part_file_name:str,储存文件名的前缀
        des_dir:源文件找到后,copy到目标文件夹
    
    """
    #print source_dirs
    pattern = re.compile("^"+part_file_name)
    for source_dir in source_dirs:
        for file_name in os.listdir(source_dir):
            if pattern.match(file_name):
                #copy file
                input_f = open(os.path.join(source_dir,file_name),"rb")
                
                print "New File:{} Exists:{}".format(os.path.join(des_dir,file_name),os.path.exists(des_dir+file_name))
                output_f = open(os.path.join(des_dir,file_name),"wb")
                output_f.write(input_f.read())
                return    
    
    print "file:{} is not exists".format(os.path.join(source_dirs[0],part_file_name))





if __name__=='__main__':
    
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument(
            "source_root",
            type = str,
            help = "path of source file"
            )
    parser.add_argument(
            "des_root",
            type = str,
            help = "path of store destination"
            )
    parser.add_argument(
            "--train",
            "-t",
            action = "store_true",
            help = "bool value,represent whether train or test."
            )
    parser.add_argument(
            "--server",
            "-s",
            action = "store_true",
            help = "bool value,run in server or local"
            )
    FLAGS,unknown= parser.parse_known_args()
    
    if unknown:
        print "unknown args:{}".format(unknown)
        exit(0)
# =============================================================================
#     source_dirs = ["/home/lrh/Pictures"]
#     des_dir = "/home/lrh/"
#     part_file_name = "Selection_007"
#     find_file(source_dirs,part_file_name,des_dir)
# =============================================================================
    #不考虑标注,,,遍历文件夹中的["malware","pua","normal"]所有文件
    import csv
    if FLAGS.server:
        source_root = FLAGS.source_root
        des_root = FLAGS.des_root
        valid_source = ['2017-03_base','2017-05-09_av_test', '2017-03-29_update']
    else:
        source_root = '/mnt/hgfs/ubuntu14/dataset/'
        des_root = '/mnt/hgfs/ubuntu14/dataset/malware/malware_2017_9_7/train'
        #有效的源文件夹,there is no '2017-03_base' in local machine.
        valid_source = ['2017-05-09_av_test', '2017-03-29_update']
    #源文件夹下需要检索的子文件夹
    valid_directory = ["malware","pua","normal"]
    
    #train or test
    if FLAGS.train:
        source_column = 1
        label_column = 2
        f = open("train.csv")
    else:
        source_column = 2
        label_column = 1
        f = open("test.csv")
    csv_reader = csv.reader(f,delimiter=',')
    
    #count malware and normal number
    malware_nums = 0
    normal_nums = 0
    for row in csv_reader:
        if row[source_column] in valid_source:
            #source_dirs = [os.path.join(source_root,row[1],path) for path in os.listdir(os.path.join(source_root,row[1]))]
            source_dirs = [os.path.join(source_root,row[source_column],path) for path in valid_directory]
            #print source_dirs
            if row[label_column]==str(1.0):
                #search file according file ID number from source directory
                #and store file into destination root path
                find_file(source_dirs,row[0],os.path.join(des_root,"malware"))
                malware_nums+=1
            else:
                find_file(source_dirs,row[0],os.path.join(des_root,"normal"))
                normal_nums+=1
        else:
            pass
    print normal_nums,malware_nums
        
